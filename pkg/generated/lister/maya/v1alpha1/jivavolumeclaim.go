/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/csi/pkg/apis/openebs.io/maya/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JivaVolumeClaimLister helps list JivaVolumeClaims.
type JivaVolumeClaimLister interface {
	// List lists all JivaVolumeClaims in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.JivaVolumeClaim, err error)
	// JivaVolumeClaims returns an object that can list and get JivaVolumeClaims.
	JivaVolumeClaims(namespace string) JivaVolumeClaimNamespaceLister
	JivaVolumeClaimListerExpansion
}

// jivaVolumeClaimLister implements the JivaVolumeClaimLister interface.
type jivaVolumeClaimLister struct {
	indexer cache.Indexer
}

// NewJivaVolumeClaimLister returns a new JivaVolumeClaimLister.
func NewJivaVolumeClaimLister(indexer cache.Indexer) JivaVolumeClaimLister {
	return &jivaVolumeClaimLister{indexer: indexer}
}

// List lists all JivaVolumeClaims in the indexer.
func (s *jivaVolumeClaimLister) List(selector labels.Selector) (ret []*v1alpha1.JivaVolumeClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JivaVolumeClaim))
	})
	return ret, err
}

// JivaVolumeClaims returns an object that can list and get JivaVolumeClaims.
func (s *jivaVolumeClaimLister) JivaVolumeClaims(namespace string) JivaVolumeClaimNamespaceLister {
	return jivaVolumeClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JivaVolumeClaimNamespaceLister helps list and get JivaVolumeClaims.
type JivaVolumeClaimNamespaceLister interface {
	// List lists all JivaVolumeClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.JivaVolumeClaim, err error)
	// Get retrieves the JivaVolumeClaim from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.JivaVolumeClaim, error)
	JivaVolumeClaimNamespaceListerExpansion
}

// jivaVolumeClaimNamespaceLister implements the JivaVolumeClaimNamespaceLister
// interface.
type jivaVolumeClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JivaVolumeClaims in the indexer for a given namespace.
func (s jivaVolumeClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JivaVolumeClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JivaVolumeClaim))
	})
	return ret, err
}

// Get retrieves the JivaVolumeClaim from the indexer for a given namespace and name.
func (s jivaVolumeClaimNamespaceLister) Get(name string) (*v1alpha1.JivaVolumeClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jivavolumeclaim"), name)
	}
	return obj.(*v1alpha1.JivaVolumeClaim), nil
}
